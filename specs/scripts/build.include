#!/bin/bash

. base.include

if [ -z "${__UBUILD_INCLUDE_BUILD}" ]; then

# @DESCRIPTION: original directory path from where this script was called
UBUILD_PWD="${PWD}"

# @DESCRIPTION: directory used as the in the works root filesystem directory
WORK_ROOTFS_DIR="${UBUILD_BUILD_DIR}/rootfs"

# @DESCRIPTION: directory used as the in the works root filesystem directory
# for the initramfs.
WORK_INITRAMFS_ROOTFS_DIR="${UBUILD_BUILD_DIR}/initramfs.rootfs"

# @DESCRIPTION: handy variable that contains the ${UBUILD_TARGET_NAME} variable
PN="${UBUILD_TARGET_NAME/*=}" # drop cross= or pkg=

# @DESCRIPTION: handy variable that contains the target type, which can either
# be "cross" or "pkg".
TARGET_TYPE="${UBUILD_TARGET_NAME/=*}"

# @DESCRIPTION: install target directory for build systems. Once data is
# installed there, these ubuild scripts will handle the build cache generation
# transparently.
TARGET_DIR="${UBUILD_BUILD_DIR}/${PN}"

# @DESCRIPTION: directory in where ubuild expects to find data to be archived
# inside the cache tarball and then unpacked back into ${UBUILD_BUILD_DIR}.
IMAGE_TARGET_DIR="${UBUILD_IMAGE_DIR}/${PN}"

# @DESCRIPTION: internal variable used to accumulate downloaded tarball paths
ARCHIVES=()

# @DESCRIPTION: download an URL using wget.
# @USAGE: _wget_url <url> <save path>
_wget_url() {
    local url="${1}"
    local archive="${2}"
    wget "${url}" -O "${archive}" || {
        rm -f "${archive}";
        return 1;
    }
}

_git_url() {
    local url="${1}"
    local archive="${2}"
    local git_repos_dir="${UBUILD_BUILD_DIR}/git-repos"
    local git_repo_dir="${git_repos_dir}/${TARGET_TYPE}.${PN}/${UBUILD_SOURCES}"

    local base_url=$(basename "${url}")
    local refname=$(echo "${base_url}" | grep -o "@.*$" | sed "s:^@::")
    if [ -n "${refname}" ]; then
        # rewrite url then
        url="${url%%@${refname}}"
    fi

    mkdir -p "${git_repo_dir}" || return 1
    git clone "${url}" "${git_repo_dir}" || return 1
    (
        if [ -n "${refname}" ]; then
            cd "${git_repo_dir}" || exit 1
            git checkout "${refname}" || exit 1
        fi
        cd "${git_repo_dir}"/.. || exit 1
        tar -c -a -p -f "${archive}" ./ || exit 1
    ) || return 1
}

# @DESCRIPTION: fetch the source tarballs defined in ${UBUILD_SRC_URI}
# @USAGE: build_src_fetch
build_src_fetch() {
    local data=
    local url=
    local rename=
    local archive=

    IFS=";" read -ra src_uri <<< "${UBUILD_SRC_URI}"
    for urlen in "${src_uri[@]}"; do
        data=( ${urlen} )
        url="${data[0]}"
        rename="${data[1]}"
        archive="${UBUILD_SOURCES_DIR}/${rename}"

        if [ ! -f "${archive}" ]; then
            echo -n "Starting to download ${url}"
            if [ -n "$(echo ${url} | grep ^git)" ]; then
                echo " using git ..."
                _git_url "${url}" "${archive}" || return 1
            else
                echo " using wget ..."
                # fallback to wget
                _wget_url "${url}" "${archive}" || return 1
            fi
        else
            local sha1=$(sha1sum "${archive}")
            echo "${archive} already there, SHA1: ${sha1}"
        fi
        ARCHIVES+=( "${archive}" )

    done
}

# @DESCRIPTION: unpack the downloaded tarballs
# into ${WORKDIR}.
# @USAGE: build_src_unpack
build_src_unpack() {
    for archive in "${ARCHIVES[@]}"; do
        echo "Unpacking ${archive} ..."
        tar -x -a -f "${archive}" -C "${WORKDIR}" || return 1
    done
}

# @DESCRIPTION: apply patches declared in ${UBUILD_PATCHES}
# @USAGE: _build_src_patch
_build_src_patch() {
    if [ -n "${UBUILD_PATCHES}" ]; then
        for p in ${UBUILD_PATCHES}; do

            echo "Applying patch: ${p}"
            local level=
            local good=
            for level in $(seq 0 5); do
                patch --quiet -p${level} --dry-run -f < "${p}" \
                    2>&1 > "${PATCH_LOG}" && {
                    good=1;
                    break;
                }
            done
            if [ "${good}" != "1" ]; then
                echo "Cannot apply patch ${p}" >&2
                return 1
            else
                patch --quiet -p${level} -f < "${p}" || return 1
            fi

        done
    fi
}

# @DESCRIPTION: prepare the sources directory by creating ${T}
# and ${BUILD_DIR} and calls build_src_patch
# @USAGE: build_src_prepare
build_src_prepare() {
    mkdir -p "${T}" || return 1
    mkdir -p "${BUILD_DIR}" || return 1
    cd "${S}" || return 1
    _build_src_patch
}

# @DESCRIPTION: call ./configure from inside ${BUILD_DIR}
# @USAGE: build_src_configure [configure args]
build_src_configure() {
    cd "${BUILD_DIR}" || return 1
    echo "Calling configure with: ${@}"
    "${S}/configure" "${@}"
}

# @DESCRIPTION: call make ${MAKEOPTS} from inside ${BUILD_DIR}
# @USAGE: build_src_compile [make args]
build_src_compile() {
    bmake "${@}"
}

# @DESCRIPTION: call make ${MAKEOPTS} DESTDIR=${TARGET_DIR} install
# from inside ${BUILD_DIR}
# @USAGE: build_src_install [make args]
build_src_install() {
    bmake DESTDIR="${TARGET_DIR}" "${@}" install
}

# @DESCRIPTION: copy the content installed by build_src_install into
# UBUILD_IMAGE_DIR/<PN> as part of the ubuild build cache implementation
# The content of UBUILD_IMAGE_DIR/<PN> will be then unpacked into
# ${Å¦ARGET_DIR} (which is just ${UBUILD_BUILD_DIR}/<PN> and it's where
# build_src_install installs the built data).
# @USAGE: build_pkg_cache
build_pkg_cache() {
    rsync -avx -H -A "${TARGET_DIR}"/ "${IMAGE_TARGET_DIR}"/
}

# @DESCRIPTION: merge the content of ${TARGET_DIR} either into
# ${WORK_ROOTFS_DIR}/ in case of ${TARGET_TYPE} = "pkg" or into
# ${CROSS_ROOT_DIR}/ in case of ${TARGET_TYPE} = "cross".
# @USAGE: build_pkg_merge
build_pkg_merge() {
    # save target type into ${TARGET_DIR}. This way we can
    # recreate WORK_ROOTFS_DIR (or CROSS_ROOT_DIR) even from
    # cached tarballs.
    echo "${TARGET_TYPE}" > "${TARGET_DIR}/${TARGET_TYPE_FILE}" || return 1

    local dest=
    if [ "${TARGET_TYPE}" = "pkg" ]; then
        dest="${WORK_ROOTFS_DIR}"
    elif [ "${TARGET_TYPE}" = "cross" ]; then
        dest="${CROSS_ROOT_DIR}"
    else
        echo "Unknown TARGET_TYPE = ${TARGET_TYPE}" >&2
        return 1
    fi

    echo "Merging ${TARGET_DIR} into ${dest} ..."
    rsync -ax -H -A -X "${TARGET_DIR}"/ "${dest}"/ || return 1
}

# @DESCRIPTION: initialize ${CROSS_ROOT_DIR} and ${WORK_ROOTFS_DIR}
# directories individual ${TARGET_DIR}s unpacked by UbuildCache into
# ${UBUILD_BUILD_DIR}
# @USAGE: _root_init
root_init() {
    local init_f=".ubuild_root_init"

    local target_dir= target_file=
    for target_file in $(find "${UBUILD_BUILD_DIR}" \
        -name "${TARGET_TYPE_FILE}"); do

        target_type=$(cat "${target_file}")
        if [ "${target_type}" != "cross" ] && \
            [ "${target_type}" != "pkg" ]; then
            echo "Invalid target type in ${target_file}" >&2
            continue
        fi

        target_dir=$(dirname "${target_file}")
        if [ "${target_dir}" = "${CROSS_ROOT_DIR}" ]; then
            echo "TARGET_DIR is ${CROSS_ROOT_DIR}, skipping ..."
            continue
        fi
        if [ "${target_dir}" = "${WORK_ROOTFS_DIR}" ]; then
            echo "TARGET_DIR is ${WORK_ROOTFS_DIR}, skipping ..."
            continue
        fi
        if [ -f "${target_dir}/${init_f}" ]; then
            echo "TARGET_DIR ${target_dir} already initialized, skipping ..."
            continue
        fi

        TARGET_DIR="${target_dir}" TARGET_TYPE="${target_type}" \
            build_pkg_merge || return 1

        touch "${target_dir}/${init_f}"
    done
}

# @DESCRIPTION: configure the build time and runtime environment
# of the cross compiler compiling sources for the target root filesystem.
# @USAGE: work_rootfs_setup_environment
work_rootfs_setup_environment() {
    if [ -z "${_WORK_ROOTFS_SETUP_ENVIRONMENT}" ]; then
        local libpath="${WORK_ROOTFS_DIR}/usr/lib"
        if [ -n "${LD_LIBRARY_PATH}" ]; then
            export LD_LIBRARY_PATH="${libpath}:${LD_LIBRARY_PATH}"
        else
            export LD_LIBRARY_PATH="${libpath}"
        fi

        local path="${WORK_ROOTFS_DIR}/usr/bin"
        export PATH="${path}:${PATH}"

        _WORK_ROOTFS_SETUP_ENVIRONMENT=1
    fi
}


# Export all the public functions without the build_* prefix.
for _func in $(compgen -A function); do
    if [ -n "$(echo ${_func} | grep ^build_)" ]; then
        _fun_name=$(echo ${_func} | sed "s:build_::")
        eval "${_fun_name}() { ${_func}; };"
    fi
done

# @DESCRIPTION: make wrapper that takes into account ${MAKEOPTS}
# @USAGE: bmake [make args]
bmake() {
    cd "${BUILD_DIR}" || return 1
    echo "Running: make ${MAKEOPTS} ${@}"
    make ${MAKEOPTS} "${@}"
}

# @DESCRIPTION: main function, to be called by build scripts sourcing this
# file. It will call all the following build phases in order:
# - src_fetch: download the sources
# - src_unpack: unpack the sources
# - src_prepare: prepare the sources (eg. apply patches)
# - src_configure: configure the sources
# - src_compile: compile the sources
# - src_install: install the sources
# - pkg_merge: merge the content installed by src_install into working
#   root directories
# - pkg_cache: cache the build outcome
# If any of these functions is not defined, main() will default to the
# built-in build_<phase>.
# @USAGE: main
main() {
    WORKDIR=$(TMPDIR="${UBUILD_BUILD_DIR}" mktemp -d \
        --suffix="${UBUILD_TARBALL_NAME}")
    if [ ! -d "${WORKDIR}" ]; then
        echo "Cannot create a temporary build dir ${WORKDIR}" >&2
        exit 1
    fi

    S="${WORKDIR}/${UBUILD_SOURCES}"
    BUILD_DIR="${WORKDIR}/build"
    T="${WORKDIR}/temp"
    PATCH_LOG="${T}/patch.log"

    export TMPDIR="${T}"
    echo
    echo "Ubuild environment variables:"
    echo "UBUILD_BUILD_DIR: ${UBUILD_BUILD_DIR}"
    echo "UBUILD_IMAGE_DIR: ${UBUILD_IMAGE_DIR}"
    echo "UBUILD_SOURCES_DIR: ${UBUILD_SOURCES_DIR}"
    echo "UBUILD_SOURCES: ${UBUILD_SOURCES}"
    echo "UBUILD_ROOTFS_DIR: ${UBUILD_ROOTFS_DIR}"
    echo "UBUILD_INITRAMFS_ROOTFS_DIR: ${UBUILD_INITRAMFS_ROOTFS_DIR}"
    echo "UBUILD_SRC_URI: ${UBUILD_SRC_URI}"
    echo "UBUILD_TARGET_NAME: ${UBUILD_TARGET_NAME}"
    echo "UBUILD_PATCHES: ${UBUILD_PATCHES}"
    echo
    echo "Local variables:"
    echo "BUILD_DIR: ${BUILD_DIR}"
    echo "IMAGE_TARGET_DIR: ${IMAGE_TARGET_DIR}"
    echo "PATCH_LOG: ${PATCH_LOG}"
    echo "PN: ${PN}"
    echo "S: ${S}"
    echo "TARGET_DIR: ${TARGET_DIR}"
    echo "TARGET_TYPE: ${TARGET_TYPE}"
    echo "WORKDIR: ${WORKDIR}"
    echo

    src_fetch && \
        src_unpack && \
        root_init && \
        src_prepare && \
        src_configure && \
        src_compile && \
        src_install && \
        pkg_merge && \
        pkg_cache
    exit_st=${?}

    if [ "${exit_st}" = "0" ]; then
        rm -rf "${WORKDIR}"
        return 0
    else
        echo
        echo "Build failure of ${UBUILD_TARBALL_NAME}" >&2
        echo "The work directory is: ${WORKDIR}" >&2
        echo "Have fun." >&2
        echo
        return ${exit_st}
    fi
}

__UBUILD_INCLUDE_BUILD=1
fi
